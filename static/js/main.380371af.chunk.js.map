{"version":3,"sources":["services/contactsApi.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSlice.js","redux/store.js","components/ContactForm/ContactForm.styles.jsx","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.styles.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","App.styles.jsx","App.jsx","index.js"],"names":["fetchContacts","a","axios","get","data","addContact","contact","post","deleteContact","id","delete","defaults","baseURL","createAsyncThunk","_","rejectWithValue","contactsAPI","contacts","contactsSlice","createSlice","name","initialState","items","filter","reducers","changeFilter","state","payload","extraReducers","fulfilled","push","actions","store","configureStore","reducer","contactsReducer","devTools","process","Form","styled","form","Title","h3","SubmitBtn","button","getContacts","getFilter","getFiltredContacts","createSelector","toLowerCase","includes","ContactForm","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","handleChange","e","currentTarget","value","onSubmit","preventDefault","normalizedName","find","el","alert","contactsOperations","shortid","generate","type","pattern","title","autoComplete","onChange","required","List","ul","Item","li","ContactsList","useEffect","length","map","cont","onClick","Label","label","p","Filter","Container","div","h2","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.380371af.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = 'https://6126871d3ab4100017a68fce.mockapi.io';\r\n\r\nexport async function fetchContacts() {\r\n  const { data } = await axios.get('/contacts');\r\n  return data;\r\n};\r\n\r\nexport async function addContact(contact) {\r\n  const { data } = await axios.post(`/contacts`, contact);\r\n  return data;\r\n}\r\n\r\nexport async function deleteContact(id) {\r\n  await axios.delete(`/contacts/${id}`);\r\n}","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport * as contactsAPI from 'services/contactsApi';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async (_, {rejectWithValue}) => {\r\n    try {\r\n      const contacts = await contactsAPI.fetchContacts();\r\n      return contacts;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/add',\r\n  async (contact, {rejectWithValue}) => {\r\n    try {\r\n      const data = await contactsAPI.addContact(contact);\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (id, {rejectWithValue}) => {\r\n    try {\r\n      await contactsAPI.deleteContact(id);\r\n      return id;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n","import { createSlice } from '@reduxjs/toolkit';\nimport { fetchContacts, deleteContact, addContact } from './contactsOperations';\n\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: { items: [], filter: '' },\n  reducers: {\n    changeFilter: (state, { payload }) => { state.filter = payload },\n  },\n  extraReducers: {\n    [fetchContacts.fulfilled]: (state, { payload }) => { state.items = payload },\n    [addContact.fulfilled]: (state, { payload }) => { state.items.push(payload); },\n    [deleteContact.fulfilled]: (state, { payload }) => { state.items = state.items.filter(({ id }) => id !== payload) },\n  },\n});\n\nexport const { changeFilter } = contactsSlice.actions;\nexport default contactsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contactsSlice';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\nwidth: 400px;\npadding: 10px;\nmargin-bottom: 30px;\ndisplay: grid;\ngrid-template-columns: 1fr;\ngap: 25px;\nborder: 1px solid black;\n`\n\nexport const Title = styled.h3`\nmargin-bottom: 7px;\n`\n\nexport const SubmitBtn = styled.button`\nwidth:172px;\n`","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFiltredContacts = createSelector(\n  [getContacts, getFilter],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()));\n  },\n);\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Form, SubmitBtn, Title } from './ContactForm.styles';\nimport { contactsOperations } from 'redux/contacts';\nimport shortid from 'shortid';\nimport { contactsSelectors } from 'redux/contacts';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default: return;\n    };\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const normalizedName = name.toLowerCase();\n    const isAlreadyinContacts = contacts.find(el => el.name.toLowerCase() === normalizedName);\n\n      if (isAlreadyinContacts) {\n        alert(`${name} is already in contacts!`);\n        return;\n    };\n\n    dispatch(contactsOperations.addContact({ name, number, id: shortid.generate() }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        <Title>Name: </Title>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <label>\n        <Title>Number: </Title>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <SubmitBtn type=\"submit\">Add Contact</SubmitBtn>\n    </Form>\n  )\n};\n\nexport default ContactForm;\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\nwidth: 400px;\nlist-style: none;\n`\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: space-between;\npadding-left: 15px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`","import React from 'react';\nimport { List, Item } from './ContactsList.styles';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts/';\n\nconst ContactsList = () => {\n  const contacts = useSelector(contactsSelectors.getFiltredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <List>\n      {!contacts.length\n        ? <p>Contact list is empty for now</p>\n        : contacts.map(cont => {\n          return (\n            <Item key={cont.id}>\n              <p>{`${cont.name}: ${cont.number}`}</p>\n              <button onClick={() => dispatch(contactsOperations.deleteContact(cont.id))}>Delete</button>\n            </Item>\n          )\n        })\n      }\n    </List>\n  );\n};\n\nexport default ContactsList;\n","import styled from \"@emotion/styled\";\n\nexport const Label = styled.label`\ndisplay: block;\nmargin-bottom: 15px;\n`\n\nexport const Title = styled.p`\nfont-weight: 500;\nmargin-bottom: 10px;\n`","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { contactsSlice } from 'redux/contacts';\nimport { Label, Title } from './Filter.styles';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      <Title>Find contacts by name:</Title>\n      <input\n        type=\"text\"\n        onChange={(e) => dispatch(contactsSlice.changeFilter(e.currentTarget.value))}\n      />\n    </Label>\n  );\n};\n\nexport default (Filter);\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\npadding: 25px;\n`\nexport const Title = styled.h2`\nmargin-bottom: 15px;\n`","import ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nimport { Container, Title } from './App.styles.jsx';\n\nfunction App() {\n    return (\n      <Container>\n        <Title>Phonebook</Title>\n        <ContactForm />\n        <Filter />\n\n        <Title>Contacts</Title>\n        <ContactsList />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}